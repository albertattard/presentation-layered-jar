plugins {
  id 'application'
  id 'net.ltgt.apt-eclipse' version '0.21'
  id 'com.github.johnrengelman.shadow' version '6.0.0'
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
  mavenCentral()
  jcenter()
}

configurations {
  developmentOnly
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
  def lombok = '1.18.12'
  def micronautVersion = '2.0.0'

  /* Lombok */
  /* Lombok needs to be defined before micronaut as micronaut needs to run after lombok. */
  compileOnly "org.projectlombok:lombok:${lombok}"
  annotationProcessor "org.projectlombok:lombok:${lombok}"

  /* Micronaut */
  annotationProcessor platform("io.micronaut:micronaut-bom:${micronautVersion}")
  annotationProcessor 'io.micronaut:micronaut-inject-java'
  annotationProcessor 'io.micronaut:micronaut-validation'
  implementation platform("io.micronaut:micronaut-bom:${micronautVersion}")
  implementation 'io.micronaut:micronaut-inject'
  implementation 'io.micronaut:micronaut-validation'
  implementation 'io.micronaut:micronaut-runtime'
  implementation 'io.micronaut:micronaut-http-server-netty'
  implementation 'io.micronaut:micronaut-http-client'
  runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'

  /* Micronaut Testing */
  testAnnotationProcessor platform("io.micronaut:micronaut-bom:${micronautVersion}")
  testAnnotationProcessor 'io.micronaut:micronaut-inject-java'
  testImplementation platform("io.micronaut:micronaut-bom:${micronautVersion}")
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'io.micronaut.test:micronaut-test-junit5'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test.classpath += configurations.developmentOnly

mainClassName = 'demo.micronaut.Application'

test {
  useJUnitPlatform()
  testLogging {
    events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs.add('-parameters')
}

tasks.withType(JavaExec) {
  classpath += configurations.developmentOnly
  jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

shadowJar {
  mergeServiceFiles()
}
